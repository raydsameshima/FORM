FORM 4.1 (May 11 2015) 64-bits                   Run: Fri May  6 12:00:34 2016
    * qqttZp1.frm
    * p1-emmision part only, for debugging
    *
    * Ray D. Sameshima
    *
    *    q(p1)\   / Z(p5)          /
    *          \ /          t(p3) /
    *           *                /
    * fprop(u,q3)\              /
    *             *^^^^^^^^^^^^*
    *            / gprop(q4)    \
    *           /                \tbar(p4)
    *          /qbar(p2)          \
    *         /                    \
    *
    * t-propagators are massive
    *
    #include standardAmplitude.frm
    * standardAmplitude.frm
    * checked Wproduction.frm
    * for qqttZ.frm
    *
    * Ray D. Sameshima
    *
    * Peskin & Schroeder notation, see Appendix A.
    * http://www.nikhef.nl/~t68/course/short.pdf
    
    Symbol N, [N^2-1], sw, cw, I3q, Qq, I3t, Qt;
    
    * i's are spinor indices, j's are Lorentz indices
    * c's are colour indices, d's are the label for su(N) generators
    * So, the generator for su(N) has indices like T(c1,c2,d1).
    AutoDeclare Indices i,j,c,d;
    *for gamma matrices
    AutoDeclare Index k;
    * masses
    AutoDeclare Symbols m;
    * momemtums
    AutoDeclare Vectors p;
    * momentum transfer (dummy)
    AutoDeclare Vectors q;
    * spinors, gamma matrices(g), 
    * and Gell-Mann matrices(T), polarization for photon
    CFunctions  UB,U,VB,V, g,T,e;
    * U(i2,p1,m,c) =  U(spinorindex, momentum, mass, colourindex) 
    * gprop(j1?,j2?,q?,d1?,d2?) = -d_(j1,j2)*prop(q.q) * ddelta(d1,d2);
    CFunctions gprop,fprop,phprop,prop;
    * for contractions of indices c's and d's
    CFunctions cdelta, ddelta;
    
    #procedure squareamplitude(Amp,Mat)
    .sort
    
    * Off statistics;
    
    * We skip everything but Amp, i.e. only operate on Amp.
    * In Amp we look for the highest i(spinor) and j(Lorentz) indices
    Skip; NSkip 'Amp';
    
    #$imax = 0;
    #do i = 1,40
    * naively assume 40 or less spinor indices
      if (  match(VB(i'i',?a)) || match(V(i'i',?a))
         || match(UB(i'i',?a)) || match(U(i'i',?a))
         || match(g(i'i',?a)) || match(g(i?,i'i',?a))
         || match(fprop(i'i',?a)) || match(fprop(i?,i'i',?a)) 
         );
         $imax = 'i';
      endif;
    #enddo
    #$jmax = 0;
    #do j = 1,20
    * naively assume 20 or less Lorentz indices
      if (  match(g(?a,j'j')) || match(phprop(j'j',?a)) 
         || match(phprop(j?,j'j',?a)) 
         || match(gprop(j'j',?a))
         || match(gprop(j?,j'j',?a))
         || match(e(j'j',?a))
         );
         $jmax = 'j';
      endif;
    #enddo
    #$cmax = 0;
    #do c = 1,40
    * naively assume 40 or less colour indices
      if (  match(VB(?a,c'c')) || match(V(?a,c'c'))
         || match(UB(?a,c'c')) || match(U(?a,c'c'))
         || match(T(c'c',?a))  || match(T(c?,c'c',?a))
         );
         $cmax = 'c';
      endif;
    #enddo
    #$dmax = 0;
    #do d = 1,20;
    * naively assume 20 or less generators(for su(3), N = 8)
      if( match(T(?a,d'd'))
        || match(gprop(?a,d'd',d?))
        || match(gprop(?a,d'd'))
        );
        $dmax = 'd';
      endif;
    #enddo
    
    .sort
    
    * Just for a check we print the highest i and j indices
    #message highest i is i'$imax', highest j is j'$jmax';
    #message highest c is c'$cmax', highest d is d'$dmax';
    
    * for debugging
    * Print +s;
    *  .end
    
    * Now construct the conjugate
    Skip;
    Local 'Amp'C = 'Amp';
    id  i_ = -i_;
    
    * for debugging
    * Print +s;
    * .end
    
    * Make a new set of dummy indices above $imax and $jmax.
    * I haven't seen <> notation, but this should clarify the pair of replacement.
    Multiply replace_(<i1,i{'$imax'+1}>,...,<i'$imax',i{2*'$imax'}>);
    Multiply replace_(<j1,j{'$jmax'+1}>,...,<j'$jmax',j{2*'$jmax'}>);
    Multiply replace_(<c1,c{'$cmax'+1}>,...,<c'$cmax',c{2*'$cmax'}>);
    Multiply replace_(<d1,d{'$dmax'+1}>,...,<d'$dmax',d{2*'$dmax'}>);
    
    * for debugging
    * Print +s;
    * .end
    
    * Exchange rows and columns, i.e. takeing the transposes.
    id g(i1?,i2?,j?)      = g(i2,i1,j);
    id T(c1?,c2?,d?)      = T(c2,c1,d);
    id fprop(i1?,i2?,?a)  = fprop(i2,i1,?a);
    id phprop(j1?,j2?,q?) = phprop(j2,j1,q);
    id gprop(j1?,j2?,q?,d1?,d2?) = gprop(j2,j1,q,d2,d1);
    
    * for debugging
    * Print +s;
    * .end
    
    * and exchange U and UB, V and VBAR
    Multiply replace_(UB,U,U,UB,VB,V,V,VB);
    
    * for debugging
    * Print +s;
    * .end
    
    * gamma5 gets a minus sign. Hence k6 <--> k7
    Multiply replace_(k6,k7,k7,k6);
    id g(?a,k5) = -g(?a,k5);
    .sort
    * The end of the conjugations.
    
    * for debugging
    * In this place, we can see both Amp and AmpC.
    Print +s;
    .sort
    
    * Now multiply Amp and AmpC to get the matrix element squared.
    Skip;
    * Drop(for efficiency): ... eliminates all expressions from the system
    * we won't use (manipulate) Amp,AmpC anymore.
    Drop,'Amp','Amp'C;
    
    Local 'Mat' = 'Amp'*'Amp'C;
    
    * for debugging
    Print +s;
    .sort
    
    * (A.22) of Peskin & Schroeder
    id U(i1?,p?,m?,c1?)*UB(i2?,p?,m?,c2?) = (g(i1,i2,p) + g(i1,i2)*m) * cdelta(c1,c2
    );
    id V(i1?,p?,m?,c1?)*VB(i2?,p?,m?,c2?) = (g(i1,i2,p) - g(i1,i2)*m) * cdelta(c1,c2
    );
    * (21,26) of Peskin & Schroeder
    * for W-boson
    * so, MUJIRUSHI e(j,p) is W-boson
    id e(j1?,p?)*e(j2?,p?) = -d_(j1,j2) + (p(j1)*p(j2))/(mw^2);
    * This is for colour-less gauge boson.
    id e(j1?,p?,m?)*e(j2?,p?,m?) = -d_(j1,j2) + (p(j1)*p(j2))/(m^2);
    * This is for coloured(QCD) gauge boson.
    id e(j1?,p?,m?,c1?)*e(j2?,p?,m?,c2?) = (-d_(j1,j2) + (p(j1)*p(j2))/(m^2)) * cdel
    ta(c1,c2);
    * This is for external(!) gluons.
    id e(j1?,p?,m?,c1?,d1?)*e(j2?,p?,m?,c2?,d2?) = (-d_(j1,j2) + (p(j1)*p(j2))/(m^2)
    ) * cdelta(c1,c2) * ddelta(d1,d2);
    
    * for debugging
    * Print +s;
    * .end
    .sort
    
    * The factors are "relative" factor from (bosonic) propagator prop.
    * in mac file, we replace by prop(x) := 1/x;
    id fprop(i1?,i2?,p?,m?)      = i_*(g(i1,i2,p) + d_(i1,i2)*m)*prop(p.p-m^2);
    id phprop(j1?,j2?,q?)        = -i_*d_(j1,j2)*prop(q.q);
    id gprop(j1?,j2?,q?,d1?,d2?) = -i_*d_(j1,j2) * prop(q.q) * ddelta(d1,d2);
    
    *   String the gamma matrices together in traces.
    repeat id g(i1?,i2?,?a)*g(i2?,i3?,?b) = g(i1,i3,?a,?b);
    .sort
    
    * for debugging
    * Print +s;
    .sort
    
    Skip; NSkip 'Mat';
    
    *************************************************************
    * for debugging, or just filtering
    * Rewrite my "trace" of g (Einstein's sum ruled) to big G, and if there still is
     nondiagonal elements, 1/0 make this program stop at here.
    .sort
    Function G;
    id g(i1?,i1?,?a) = G(i1,i1,?a);
    id g(i1?,i2?,?a) = 1/(1-1);
    .sort
    
    * When nothing hits at 1/0, recover to small g. 
    id G(i1?,i1?,?a) = g(i1,i1,?a);
    .sort
    
    * Bracket g;
    * Print[]; 
    * .sort
    *************************************************************
    
    *   Now put the traces one by one in terms of the built in gammas
    #do i = 1,10
      id, once, g(i1?,i1?,?a) = g_('i',?a);
    * g7_ = 1-g5_, g6_ = 1+g5_
      id  g_('i',k7) = g7_('i');
      id  g_('i',k6) = g6_('i');
      id  g_('i',k5) = g5_('i');
    #enddo
    .sort
    
    * for debugging
    * Print +s;
    * .sort
    * .end
    
    * Finally take the traces, naively assuming less than 10 fermions.
    #do i = 1,10
      Trace4,'i';
    #enddo
    
    * Bracket T;
    * Print +s;
    * Print[];
    .sort
    * .end
    
    * qcd trace by hand
    * eq.(3.25) of QCD practice
    * We didn't assume the symmetric property on ddelta.
    id T(c1?, c2?, d1?)* ddelta(d1?,d2?) = T(c1,c2,d2);
    id T(c1?, c2?, d1?)* ddelta(d2?,d1?) = T(c1,c2,d2);
    id T(c1?, c2?, d1?)* cdelta(c1?,c3?) = T(c3,c2,d1);
    id T(c1?, c2?, d1?)* cdelta(c2?,c3?) = T(c1,c3,d1);
    * QCD practice eq.(3.25)
    repeat id T(c1?,c2?,d1?)*T(c3?,c4?,d1?) 
              = 1/2 * (cdelta(c1,c4)*cdelta(c2,c3) - (1/N) * cdelta(c1,c2)*cdelta(c3
    ,c4));
    repeat id cdelta(c1?,c2?)*cdelta(c2?,c3?) = cdelta(c1,c3);
    repeat id cdelta(c1?,c2?)*cdelta(c3?,c2?) = cdelta(c1,c3);
    repeat id ddelta(d1?,d2?)*ddelta(d2?,d3?) = ddelta(d1,d3);
    repeat id ddelta(d1?,d2?)*ddelta(d3?,d2?) = ddelta(d1,d3);
    
    id cdelta(c1?,c1?) = N; 
    
    * Bracket T,N, ddelta,cdelta;
    *Print;
    *.sort
    * .end
    id ddelta(d1?,d1?) = N^2-1;
    
    id N^2 = [N^2-1] + 1;
    
    Bracket [N^2-1];
    * Print +s;
    * Print[];
    .sort
    * .end
    
    * id ddelta(d1?,d2?) = 0;
    * id cdelta(c1?,c2?) = 0;
    * .sort
    
    * Bracket N;
    * Print[];
    * .sort
    * .end
    
    #endprocedure
    * i's are spinor indices, j's are Lorentz indices
    * c's are colour indices, d's are the label for su(N) generators
    *
    * Take the spinor along the fermion line, (oppositely) !!
    * The index k7 of g(i2,i3,k7) is for 7th gamma matrix given by (1-g5).
    Local Amp = 
    
    * p1-emission
      VB(i1,p2,mq,c1) * 
      (i_ * g(i1,i2,j1) * T(c1,c2,d1)) * 
      fprop(i2,i3,q3,mq) *
      i_/cw *(g(i3,i4,j2) * e(j2,p5,mz)) * 
        ((I3q/2) * g(i4,i5,k7) - Qq * sw^2 * d_(i4,i5) ) * 
      U(i5,p1,mq,c2) *
      gprop(j1,j3,q4,d1,d2) *
      UB(i6,p4,mt,c3) * 
      (i_ * g(i6,i7,j3) * T(c3,c4,d2)) * 
      V(i7,p3,mt,c4)
      ;
    
    #call squareamplitude(Amp,M)

Time =       0.00 sec    Generated terms =          2
             Amp         Terms in output =          2
                         Bytes used      =        888

Time =       0.01 sec    Generated terms =          2
             Amp         Terms in output =          2
                         Bytes used      =        888
~~~highest i is i7, highest j is j3
~~~highest c is c4, highest d is d2

Time =       0.01 sec    Generated terms =          2
            AmpC         Terms in output =          2
                         Bytes used      =        896

Time =       0.01 sec    Generated terms =          2
             Amp         Terms in output =          2
                         Bytes used      =        888

Time =       0.01 sec    Generated terms =          2
            AmpC         Terms in output =          2
                         Bytes used      =        896

   Amp =
       - 1/2*UB(i6,p4,mt,c3)*U(i5,p1,mq,c2)*VB(i1,p2,mq,c1)*V(i7,p3,mt,c4)*g(
      i1,i2,j1)*g(i3,i4,j2)*g(i4,i5,k7)*g(i6,i7,j3)*T(c1,c2,d1)*T(c3,c4,d2)*e(
      j2,p5,mz)*gprop(j1,j3,q4,d1,d2)*fprop(i2,i3,q3,mq)*i_*cw^-1*I3q
       + UB(i6,p4,mt,c3)*U(i5,p1,mq,c2)*VB(i1,p2,mq,c1)*V(i7,p3,mt,c4)*g(i1,i2
      ,j1)*g(i3,i5,j2)*g(i6,i7,j3)*T(c1,c2,d1)*T(c3,c4,d2)*e(j2,p5,mz)*gprop(
      j1,j3,q4,d1,d2)*fprop(i2,i3,q3,mq)*i_*sw^2*cw^-1*Qq
      ;

   AmpC =
       + 1/2*UB(i12,p1,mq,c6)*U(i13,p4,mt,c7)*VB(i14,p3,mt,c8)*V(i8,p2,mq,c5)*
      g(i9,i8,j4)*g(i11,i10,j5)*g(i12,i11,k6)*g(i14,i13,j6)*T(c6,c5,d3)*T(c8,
      c7,d4)*e(j5,p5,mz)*gprop(j6,j4,q4,d4,d3)*fprop(i10,i9,q3,mq)*i_*cw^-1*
      I3q
       - UB(i12,p1,mq,c6)*U(i13,p4,mt,c7)*VB(i14,p3,mt,c8)*V(i8,p2,mq,c5)*g(i9
      ,i8,j4)*g(i12,i10,j5)*g(i14,i13,j6)*T(c6,c5,d3)*T(c8,c7,d4)*e(j5,p5,mz)*
      gprop(j6,j4,q4,d4,d3)*fprop(i10,i9,q3,mq)*i_*sw^2*cw^-1*Qq
      ;


Time =       0.01 sec    Generated terms =          4
               M         Terms in output =          4
                         Bytes used      =       2792

   M =
       + 1/4*UB(i6,p4,mt,c3)*UB(i12,p1,mq,c6)*U(i5,p1,mq,c2)*U(i13,p4,mt,c7)*
      VB(i1,p2,mq,c1)*VB(i14,p3,mt,c8)*V(i7,p3,mt,c4)*V(i8,p2,mq,c5)*g(i1,i2,
      j1)*g(i3,i4,j2)*g(i4,i5,k7)*g(i6,i7,j3)*g(i9,i8,j4)*g(i11,i10,j5)*g(i12,
      i11,k6)*g(i14,i13,j6)*T(c1,c2,d1)*T(c3,c4,d2)*T(c6,c5,d3)*T(c8,c7,d4)*e(
      j2,p5,mz)*e(j5,p5,mz)*gprop(j1,j3,q4,d1,d2)*gprop(j6,j4,q4,d4,d3)*fprop(
      i2,i3,q3,mq)*fprop(i10,i9,q3,mq)*cw^-2*I3q^2
       - 1/2*UB(i6,p4,mt,c3)*UB(i12,p1,mq,c6)*U(i5,p1,mq,c2)*U(i13,p4,mt,c7)*
      VB(i1,p2,mq,c1)*VB(i14,p3,mt,c8)*V(i7,p3,mt,c4)*V(i8,p2,mq,c5)*g(i1,i2,
      j1)*g(i3,i4,j2)*g(i4,i5,k7)*g(i6,i7,j3)*g(i9,i8,j4)*g(i12,i10,j5)*g(i14,
      i13,j6)*T(c1,c2,d1)*T(c3,c4,d2)*T(c6,c5,d3)*T(c8,c7,d4)*e(j2,p5,mz)*e(j5
      ,p5,mz)*gprop(j1,j3,q4,d1,d2)*gprop(j6,j4,q4,d4,d3)*fprop(i2,i3,q3,mq)*
      fprop(i10,i9,q3,mq)*sw^2*cw^-2*I3q*Qq
       - 1/2*UB(i6,p4,mt,c3)*UB(i12,p1,mq,c6)*U(i5,p1,mq,c2)*U(i13,p4,mt,c7)*
      VB(i1,p2,mq,c1)*VB(i14,p3,mt,c8)*V(i7,p3,mt,c4)*V(i8,p2,mq,c5)*g(i1,i2,
      j1)*g(i3,i5,j2)*g(i6,i7,j3)*g(i9,i8,j4)*g(i11,i10,j5)*g(i12,i11,k6)*g(
      i14,i13,j6)*T(c1,c2,d1)*T(c3,c4,d2)*T(c6,c5,d3)*T(c8,c7,d4)*e(j2,p5,mz)*
      e(j5,p5,mz)*gprop(j1,j3,q4,d1,d2)*gprop(j6,j4,q4,d4,d3)*fprop(i2,i3,q3,
      mq)*fprop(i10,i9,q3,mq)*sw^2*cw^-2*I3q*Qq
       + UB(i6,p4,mt,c3)*UB(i12,p1,mq,c6)*U(i5,p1,mq,c2)*U(i13,p4,mt,c7)*VB(i1
      ,p2,mq,c1)*VB(i14,p3,mt,c8)*V(i7,p3,mt,c4)*V(i8,p2,mq,c5)*g(i1,i2,j1)*g(
      i3,i5,j2)*g(i6,i7,j3)*g(i9,i8,j4)*g(i12,i10,j5)*g(i14,i13,j6)*T(c1,c2,d1
      )*T(c3,c4,d2)*T(c6,c5,d3)*T(c8,c7,d4)*e(j2,p5,mz)*e(j5,p5,mz)*gprop(j1,
      j3,q4,d1,d2)*gprop(j6,j4,q4,d4,d3)*fprop(i2,i3,q3,mq)*fprop(i10,i9,q3,mq
      )*sw^4*cw^-2*Qq^2
      ;


Time =       0.01 sec    Generated terms =        128
               M         Terms in output =        128
                         Bytes used      =      80988

Time =       0.07 sec    Generated terms =        512
               M         Terms in output =        512
                         Bytes used      =     378980

Time =       0.07 sec    Generated terms =        512
               M         Terms in output =        512
                         Bytes used      =     378980

Time =       0.08 sec    Generated terms =        512
               M         Terms in output =        512
                         Bytes used      =     378980

Time =       0.08 sec    Generated terms =        512
               M         Terms in output =        512
                         Bytes used      =     378980

Time =       0.09 sec    Generated terms =        512
               M         Terms in output =        512
                         Bytes used      =     378980

Time =       0.11 sec    Generated terms =        448
               M         Terms in output =        384
                         Bytes used      =     228620

Time =       0.13 sec    Generated terms =        372
               M         Terms in output =        127
                         Bytes used      =       9948

Time =       0.15 sec    Generated terms =        635
               M         Terms in output =        127
                         Bytes used      =       9664
    .sort

Time =       0.15 sec    Generated terms =        127
               M         Terms in output =        127
                         Bytes used      =      10652
    
    id 1/sqrt_(2)/sqrt_(2) = 1/2;
    
    id q3 = p1 - p5;
    id q4 = p3 + p4;
    
    argument;
      id q3 = p1 - p5;
      id q4 = p3 + p4;
    endargument;
    
    .sort

Time =       0.16 sec    Generated terms =        308
               M         Terms in output =        171
                         Bytes used      =      13916
     
    * Bracket [N^2-1], N,g;
    * Print +s;
    * .sort
    
    id p5 = p1+p2 -p3-p4;
    argument;
      id p5 = p1+p2 -p3-p4;
    endargument;
    .sort

Time =       0.32 sec    Generated terms =       3600
               M         Terms in output =        856
                         Bytes used      =      66244
    
    id p1.p1 = mq^2;
    id p2.p2 = mq^2;
    id p3.p3 = mt^2;
    id p4.p4 = mt^2;
    argument;
      id p1.p1 = mq^2;
      id p2.p2 = mq^2;
      id p3.p3 = mt^2;
      id p4.p4 = mt^2;
    endargument;
    
    id mq = 0;
    argument;
      id mq = 0;
    endargument;
    
    Bracket prop;
    * Bracket prop, mw, mw^(-1);
    * Print +s;
    * .end
    .sort

Time =       0.35 sec    Generated terms =        207
               M         Terms in output =        141
                         Bytes used      =      10652
    
    ********************************************************************************
    *
    
    * Here I will implement the convertor toward Maxima readable form.
    
    ********************************************************************************
    *
    
    Function eta;
    
    id p1?.p2? = eta(p1,p2);
    argument;
      id p1?.p2? = eta(p1,p2);
    endargument;
    
    .sort

Time =       0.35 sec    Generated terms =        141
               M         Terms in output =        141
                         Bytes used      =      29156
    
    * Bracket prop,mz;
    * Bracket prop, mw, [N^2-1],Qq, I3q, Qt,I3t,cw,sw,mt,mz;
    Bracket prop, [N^2-1], Qq,I3q, Qt,I3t,cw,cw,mz,mw;
    Print +s;
    .end

Time =       0.36 sec    Generated terms =        141
               M         Terms in output =        141
                         Bytes used      =       9492

   M =

       + prop(2*mt^2 + 2*eta(p3,p4))^2*prop(2*mt^2 - 2*eta(p4,p2) - 2*eta(p3,
      p2) + 2*eta(p3,p4))^2*[N^2-1]*cw^-2*Qq^2*mz^-2 * (
          + 32*eta(p1,p2)*sw^4*mt^6
          - 64*eta(p1,p2)*eta(p4,p2)*sw^4*mt^4
          + 32*eta(p1,p2)*eta(p4,p2)*eta(p4,p2)*sw^4*mt^2
          + 64*eta(p1,p2)*eta(p4,p2)*eta(p3,p2)*sw^4*mt^2
          - 64*eta(p1,p2)*eta(p4,p2)*eta(p3,p4)*sw^4*mt^2
          - 64*eta(p1,p2)*eta(p3,p2)*sw^4*mt^4
          + 32*eta(p1,p2)*eta(p3,p2)*eta(p3,p2)*sw^4*mt^2
          - 64*eta(p1,p2)*eta(p3,p2)*eta(p3,p4)*sw^4*mt^2
          + 64*eta(p1,p2)*eta(p3,p4)*sw^4*mt^4
          + 32*eta(p1,p2)*eta(p3,p4)*eta(p3,p4)*sw^4*mt^2
          + 32*eta(p4,p2)*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*sw^4
          + 32*eta(p4,p2)*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*sw^4
          + 64*eta(p4,p2)*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*sw^4
          - 64*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*sw^4*mt^2
          - 64*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*sw^4
          - 64*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*sw^4*mt^2
          - 64*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*sw^4
          + 64*eta(p4,p2)*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^4
          + 32*eta(p4,p2)*eta(p3,p2)*eta(p3,p2)*eta(p3,p1)*sw^4
          - 64*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*sw^4*mt^2
          - 64*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*eta(p3,p4)*sw^4
          + 32*eta(p4,p2)*eta(p3,p1)*sw^4*mt^4
          + 64*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*sw^4*mt^2
          + 32*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*eta(p3,p4)*sw^4
          + 32*eta(p3,p2)*eta(p4,p1)*sw^4*mt^4
          + 64*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*sw^4*mt^2
          + 32*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*eta(p3,p4)*sw^4
          - 64*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^4*mt^2
          - 64*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*sw^4
          + 32*eta(p3,p2)*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^4
          )

       + prop(2*mt^2 + 2*eta(p3,p4))^2*prop(2*mt^2 - 2*eta(p4,p2) - 2*eta(p3,
      p2) + 2*eta(p3,p4))^2*[N^2-1]*cw^-2*Qq^2 * (
          - 32*eta(p1,p2)*sw^4*mt^4
          - 32*eta(p1,p2)*eta(p4,p2)*sw^4*mt^2
          + 64*eta(p1,p2)*eta(p4,p2)*eta(p3,p2)*sw^4
          - 32*eta(p1,p2)*eta(p4,p2)*eta(p3,p4)*sw^4
          - 32*eta(p1,p2)*eta(p3,p2)*sw^4*mt^2
          - 32*eta(p1,p2)*eta(p3,p2)*eta(p3,p4)*sw^4
          - 32*eta(p1,p2)*eta(p3,p4)*sw^4*mt^2
          + 32*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*sw^4
          + 64*eta(p4,p2)*eta(p4,p1)*sw^4*mt^2
          + 32*eta(p4,p2)*eta(p4,p1)*eta(p3,p4)*sw^4
          - 32*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*sw^4
          - 32*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*sw^4
          + 32*eta(p4,p2)*eta(p3,p1)*sw^4*mt^2
          + 32*eta(p3,p2)*eta(p4,p1)*sw^4*mt^2
          + 32*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^4
          + 64*eta(p3,p2)*eta(p3,p1)*sw^4*mt^2
          + 32*eta(p3,p2)*eta(p3,p1)*eta(p3,p4)*sw^4
          )

       + prop(2*mt^2 + 2*eta(p3,p4))^2*prop(2*mt^2 - 2*eta(p4,p2) - 2*eta(p3,
      p2) + 2*eta(p3,p4))^2*[N^2-1]*cw^-2*I3q*Qq*mz^-2 * (
          - 32*eta(p1,p2)*sw^2*mt^6
          + 64*eta(p1,p2)*eta(p4,p2)*sw^2*mt^4
          - 32*eta(p1,p2)*eta(p4,p2)*eta(p4,p2)*sw^2*mt^2
          - 64*eta(p1,p2)*eta(p4,p2)*eta(p3,p2)*sw^2*mt^2
          + 64*eta(p1,p2)*eta(p4,p2)*eta(p3,p4)*sw^2*mt^2
          + 64*eta(p1,p2)*eta(p3,p2)*sw^2*mt^4
          - 32*eta(p1,p2)*eta(p3,p2)*eta(p3,p2)*sw^2*mt^2
          + 64*eta(p1,p2)*eta(p3,p2)*eta(p3,p4)*sw^2*mt^2
          - 64*eta(p1,p2)*eta(p3,p4)*sw^2*mt^4
          - 32*eta(p1,p2)*eta(p3,p4)*eta(p3,p4)*sw^2*mt^2
          - 32*eta(p4,p2)*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*sw^2
          - 32*eta(p4,p2)*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*sw^2
          - 64*eta(p4,p2)*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*sw^2
          + 64*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*sw^2*mt^2
          + 64*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*sw^2
          + 64*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*sw^2*mt^2
          + 64*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*sw^2
          - 64*eta(p4,p2)*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^2
          - 32*eta(p4,p2)*eta(p3,p2)*eta(p3,p2)*eta(p3,p1)*sw^2
          + 64*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*sw^2*mt^2
          + 64*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*eta(p3,p4)*sw^2
          - 32*eta(p4,p2)*eta(p3,p1)*sw^2*mt^4
          - 64*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*sw^2*mt^2
          - 32*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*eta(p3,p4)*sw^2
          - 32*eta(p3,p2)*eta(p4,p1)*sw^2*mt^4
          - 64*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*sw^2*mt^2
          - 32*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*eta(p3,p4)*sw^2
          + 64*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^2*mt^2
          + 64*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*sw^2
          - 32*eta(p3,p2)*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^2
          )

       + prop(2*mt^2 + 2*eta(p3,p4))^2*prop(2*mt^2 - 2*eta(p4,p2) - 2*eta(p3,
      p2) + 2*eta(p3,p4))^2*[N^2-1]*cw^-2*I3q*Qq * (
          + 32*eta(p1,p2)*sw^2*mt^4
          + 32*eta(p1,p2)*eta(p4,p2)*sw^2*mt^2
          - 64*eta(p1,p2)*eta(p4,p2)*eta(p3,p2)*sw^2
          + 32*eta(p1,p2)*eta(p4,p2)*eta(p3,p4)*sw^2
          + 32*eta(p1,p2)*eta(p3,p2)*sw^2*mt^2
          + 32*eta(p1,p2)*eta(p3,p2)*eta(p3,p4)*sw^2
          + 32*eta(p1,p2)*eta(p3,p4)*sw^2*mt^2
          - 32*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*sw^2
          - 64*eta(p4,p2)*eta(p4,p1)*sw^2*mt^2
          - 32*eta(p4,p2)*eta(p4,p1)*eta(p3,p4)*sw^2
          + 32*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*sw^2
          + 32*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*sw^2
          - 32*eta(p4,p2)*eta(p3,p1)*sw^2*mt^2
          - 32*eta(p3,p2)*eta(p4,p1)*sw^2*mt^2
          - 32*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*sw^2
          - 64*eta(p3,p2)*eta(p3,p1)*sw^2*mt^2
          - 32*eta(p3,p2)*eta(p3,p1)*eta(p3,p4)*sw^2
          )

       + prop(2*mt^2 + 2*eta(p3,p4))^2*prop(2*mt^2 - 2*eta(p4,p2) - 2*eta(p3,
      p2) + 2*eta(p3,p4))^2*[N^2-1]*cw^-2*I3q^2*mz^-2 * (
          + 16*eta(p1,p2)*mt^6
          - 32*eta(p1,p2)*eta(p4,p2)*mt^4
          + 16*eta(p1,p2)*eta(p4,p2)*eta(p4,p2)*mt^2
          + 32*eta(p1,p2)*eta(p4,p2)*eta(p3,p2)*mt^2
          - 32*eta(p1,p2)*eta(p4,p2)*eta(p3,p4)*mt^2
          - 32*eta(p1,p2)*eta(p3,p2)*mt^4
          + 16*eta(p1,p2)*eta(p3,p2)*eta(p3,p2)*mt^2
          - 32*eta(p1,p2)*eta(p3,p2)*eta(p3,p4)*mt^2
          + 32*eta(p1,p2)*eta(p3,p4)*mt^4
          + 16*eta(p1,p2)*eta(p3,p4)*eta(p3,p4)*mt^2
          + 16*eta(p4,p2)*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)
          + 16*eta(p4,p2)*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)
          + 32*eta(p4,p2)*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)
          - 32*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*mt^2
          - 32*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)
          - 32*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*mt^2
          - 32*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)
          + 32*eta(p4,p2)*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)
          + 16*eta(p4,p2)*eta(p3,p2)*eta(p3,p2)*eta(p3,p1)
          - 32*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*mt^2
          - 32*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)*eta(p3,p4)
          + 16*eta(p4,p2)*eta(p3,p1)*mt^4
          + 32*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*mt^2
          + 16*eta(p4,p2)*eta(p3,p1)*eta(p3,p4)*eta(p3,p4)
          + 16*eta(p3,p2)*eta(p4,p1)*mt^4
          + 32*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*mt^2
          + 16*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)*eta(p3,p4)
          - 32*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*mt^2
          - 32*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)*eta(p3,p4)
          + 16*eta(p3,p2)*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)
          )

       + prop(2*mt^2 + 2*eta(p3,p4))^2*prop(2*mt^2 - 2*eta(p4,p2) - 2*eta(p3,
      p2) + 2*eta(p3,p4))^2*[N^2-1]*cw^-2*I3q^2 * (
          - 16*eta(p1,p2)*mt^4
          - 16*eta(p1,p2)*eta(p4,p2)*mt^2
          + 32*eta(p1,p2)*eta(p4,p2)*eta(p3,p2)
          - 16*eta(p1,p2)*eta(p4,p2)*eta(p3,p4)
          - 16*eta(p1,p2)*eta(p3,p2)*mt^2
          - 16*eta(p1,p2)*eta(p3,p2)*eta(p3,p4)
          - 16*eta(p1,p2)*eta(p3,p4)*mt^2
          + 16*eta(p4,p2)*eta(p4,p2)*eta(p3,p1)
          + 32*eta(p4,p2)*eta(p4,p1)*mt^2
          + 16*eta(p4,p2)*eta(p4,p1)*eta(p3,p4)
          - 16*eta(p4,p2)*eta(p3,p2)*eta(p4,p1)
          - 16*eta(p4,p2)*eta(p3,p2)*eta(p3,p1)
          + 16*eta(p4,p2)*eta(p3,p1)*mt^2
          + 16*eta(p3,p2)*eta(p4,p1)*mt^2
          + 16*eta(p3,p2)*eta(p3,p2)*eta(p4,p1)
          + 32*eta(p3,p2)*eta(p3,p1)*mt^2
          + 16*eta(p3,p2)*eta(p3,p1)*eta(p3,p4)
          );

  0.36 sec out of 0.40 sec
